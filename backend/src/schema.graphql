scalar DateTime

type SuccessMessage {
  message: String
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  name: String!
  password: String!
  email: String!
  events: [Event!]!
  lists: [List!]!
}

type Place {
  id: ID!
  gcmsId: String!
}

type Event {
  id: ID!
  gsmcId: String!
}

type List {
  id: ID!
  name: String!
  places: [Place!]!
}

type Query {
  me: User
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String): AuthPayload!
  logout: SuccessMessage
  toggleEvent(gcmsId: String!): Event
  createList(title: String!, gcmsId: String!): List
  deleteList(id: ID!): List
}
