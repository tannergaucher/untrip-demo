scalar DateTime

type SuccessMessage {
  message: String
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  name: String!
  password: String!
  email: String!
  permissions: [Permission]
  events: [Event!]!
  lists: [List!]!
}

enum Permission {
  ADMIN
  FREE_USER
  PAID_LEVEL_ONE
}

type Place {
  id: ID!
  gcmsId: String
  list: List!
  name: String
}

type Event {
  id: ID!
  gsmcId: String!
}

type List {
  id: ID!
  title: String!
  places: [Place!]!
  user: User
  isPrivate: Boolean
}

type Query {
  me: User
  list(listId: ID!): List!
  lists: [List!]!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String): AuthPayload!
  logout: SuccessMessage
  toggleEvent(gcmsId: String!): Event
  createList(title: String!, gcmsId: String!, name: String!): List
  deleteList(listId: ID!): List
  togglePlace(listId: ID!, gcmsId: String!, name: String!): Place
  toggleIsPrivateList(listId: ID!): List
  updateListTitle(listId: ID!, newTitle: String!): List
}
